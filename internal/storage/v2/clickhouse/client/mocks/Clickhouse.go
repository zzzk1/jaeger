// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	client "github.com/jaegertracing/jaeger/internal/storage/v2/clickhouse/client"
	conn "github.com/jaegertracing/jaeger/internal/storage/v2/clickhouse/client/conn"

	mock "github.com/stretchr/testify/mock"
)

// Clickhouse is an autogenerated mock type for the Clickhouse type
type Clickhouse struct {
	mock.Mock
}

// Open provides a mock function with given fields: config
func (_m *Clickhouse) Open(config conn.Configuration) (client.Conn, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 client.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(conn.Configuration) (client.Conn, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(conn.Configuration) client.Conn); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(conn.Configuration) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClickhouse creates a new instance of Clickhouse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClickhouse(t interface {
	mock.TestingT
	Cleanup(func())
}) *Clickhouse {
	mock := &Clickhouse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
