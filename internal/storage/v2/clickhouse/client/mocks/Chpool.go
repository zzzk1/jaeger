// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	client "github.com/jaegertracing/jaeger/internal/storage/v2/clickhouse/client"
	mock "github.com/stretchr/testify/mock"

	pool "github.com/jaegertracing/jaeger/internal/storage/v2/clickhouse/client/pool"

	zap "go.uber.org/zap"
)

// Chpool is an autogenerated mock type for the Chpool type
type Chpool struct {
	mock.Mock
}

// Dial provides a mock function with given fields: config, log
func (_m *Chpool) Dial(config pool.Configuration, log *zap.Logger) (client.Pool, error) {
	ret := _m.Called(config, log)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 client.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(pool.Configuration, *zap.Logger) (client.Pool, error)); ok {
		return rf(config, log)
	}
	if rf, ok := ret.Get(0).(func(pool.Configuration, *zap.Logger) client.Pool); ok {
		r0 = rf(config, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Pool)
		}
	}

	if rf, ok := ret.Get(1).(func(pool.Configuration, *zap.Logger) error); ok {
		r1 = rf(config, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChpool creates a new instance of Chpool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChpool(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chpool {
	mock := &Chpool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
